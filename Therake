-- Load WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")

-- Create Window
local Window = WindUI:CreateWindow({
    Title = "AWPHUB - The Rake: Remastered",
    Icon = "moon-star",
    Author = "AWP",
    Folder = "AWPHUB",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200
})

Window:EditOpenButton({
    Title = "Open AWP HUB",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromRGB(255, 0, 123), Color3.fromRGB(255, 150, 0)),
    Draggable = true
})

-- Tabs
local Tabs = {
    ESP = Window:Tab({ Title = "ESP", Icon = "eye" }),
    Settings = Window:Tab({ Title = "Settings", Icon = "sliders-horizontal" }),
}

-- ESP Logic
local activeESP = {}

local function applyHighlight(obj, color)
    if not obj or not obj:IsDescendantOf(Workspace) then return end
    if not activeESP[obj] and obj:FindFirstChild("HumanoidRootPart") then
        local h = Instance.new("Highlight", obj)
        h.FillColor = color
        h.OutlineColor = color
        h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        activeESP[obj] = h
    end
end

local function clearESP()
    for obj, h in pairs(activeESP) do
        if h then h:Destroy() end
    end
    activeESP = {}
end

Tabs.ESP:Toggle({
    Title = "ESP: Rake",
    Icon = "skull",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("RakeESP")
        if state then
            RunService:BindToRenderStep("RakeESP", 1, function()
                for _, v in pairs(Workspace:GetChildren()) do
                    if v:IsA("Model") and v.Name:lower():find("rake") then
                        applyHighlight(v, Color3.fromRGB(255, 0, 0))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

Tabs.ESP:Toggle({
    Title = "ESP: Players",
    Icon = "user",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("PlayerESP")
        if state then
            RunService:BindToRenderStep("PlayerESP", 1, function()
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= LocalPlayer and p.Character then
                        applyHighlight(p.Character, Color3.fromRGB(0, 170, 255))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

-- Settings Toggles
local Flags = {}
local OriginalLighting = {
    Ambient = Lighting.Ambient,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    ColorShift_Top = Lighting.ColorShift_Top,
    Brightness = Lighting.Brightness,
    FogEnd = Lighting.FogEnd
}

-- Infinite Stamina
Tabs.Settings:Toggle({
    Title = "Infinite Stamina",
    Icon = "zap",
    Value = true,
    Callback = function(state)
        RunService:UnbindFromRenderStep("Stamina")
        if state then
            RunService:BindToRenderStep("Stamina", 100, function()
                local energy = LocalPlayer:FindFirstChild("Energy")
                if energy then energy.Value = 100 end
                for _, v in pairs(getgc(true)) do
                    if type(v) == "table" and rawget(v, "STAMINA_REGEN") then
                        v.STAMINA_REGEN = 100
                        v.JUMP_STAMINA = 0
                        v.JUMP_COOLDOWN = 0
                        v.STAMINA_TAKE = 0
                        v.stamina = 100
                    end
                end
            end)
        end
    end
})

-- Remove Blood Hour Color
Tabs.Settings:Toggle({
    Title = "Remove Blood Hour Color",
    Icon = "sun",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("NoBloodHour")
        if state then
            RunService:BindToRenderStep("NoBloodHour", 1, function()
                Lighting.Ambient = Color3.new(1, 1, 1)
                Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
                Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
                Lighting.ColorShift_Top = Color3.new(0, 0, 0)
                Lighting.FogColor = Color3.new(1, 1, 1)
            end)
        else
            for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
        end
    end
})

-- FullBright + No Fog
Tabs.Settings:Toggle({
    Title = "FullBright + No Fog",
    Icon = "lightbulb",
    Value = false,
    Callback = function(state)
        local function doFullBright()
            if state then
                Lighting.Ambient = Color3.new(1, 1, 1)
                Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
                Lighting.ColorShift_Top = Color3.new(1, 1, 1)
                Lighting.Brightness = 3
                Lighting.FogEnd = 100000
            else
                for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
            end
        end
        doFullBright()
        if Flags.FullBright then Flags.FullBright:Disconnect() Flags.FullBright = nil end
        if state then
            Flags.FullBright = Lighting.LightingChanged:Connect(doFullBright)
        end
    end
})

-- Fake Night Vision
Tabs.Settings:Toggle({
    Title = "Fake Night Vision",
    Icon = "eye",
    Value = false,
    Callback = function(state)
        local function doNightVision()
            if state then
                Lighting.Ambient = Color3.fromRGB(80, 255, 100)
                Lighting.ColorShift_Bottom = Color3.fromRGB(80, 255, 100)
                Lighting.ColorShift_Top = Color3.fromRGB(80, 255, 100)
                Lighting.Brightness = 2.5
                Lighting.FogEnd = 100000
            else
                for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
            end
        end
        doNightVision()
        if Flags.NightVision then Flags.NightVision:Disconnect() Flags.NightVision = nil end
        if state then
            Flags.NightVision = Lighting.LightingChanged:Connect(doNightVision)
        end
    end
})

-- Anti-AFK
Tabs.Settings:Toggle({
    Title = "Anti-AFK",
    Icon = "coffee",
    Value = true,
    Callback = function()
        Players.LocalPlayer.Idled:Connect(function()
            VirtualUser:Button2Down(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
            VirtualUser:Button2Up(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
        end)
    end
})

-- Anti-Lag
Tabs.Settings:Toggle({
    Title = "Anti-Lag",
    Icon = "cpu",
    Value = false,
    Callback = function(state)
        for _, v in pairs(Workspace:GetDescendants()) do
            if v:IsA("Texture") or v:IsA("Decal") then v:Destroy() end
            if v:IsA("ParticleEmitter") or v:IsA("Trail") then v.Enabled = not state end
        end
    end
})

-- Anti-Ping Spike
Tabs.Settings:Toggle({
    Title = "Anti-Ping Spike",
    Icon = "wifi",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("PingSpikeFix")
        if state then
            RunService:BindToRenderStep("PingSpikeFix", 1, function()
                local _ = math.sin(tick())
            end)
        end
    end
})

-- Anti-Latency
Tabs.Settings:Toggle({
    Title = "Anti-Latency",
    Icon = "activity",
    Value = false,
    Callback = function(state)
        settings().Rendering.QualityLevel = state and Enum.QualityLevel.Level01 or Enum.QualityLevel.Automatic
    end
})

-- Anti-Kick
Tabs.Settings:Toggle({
    Title = "Anti-Kick",
    Icon = "x-octagon",
    Value = true,
    Callback = function(state)
        if state then
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local old = mt.__namecall
            mt.__namecall = newcclosure(function(self, ...)
                if getnamecallmethod() == "Kick" then return warn("[AntiKick] Blocked kick") end
                return old(self, ...)
            end)
            setreadonly(mt, true)
        end
    end
})

-- Anti-Cheat Bypass
Tabs.Settings:Toggle({
    Title = "Anti-Cheat Bypass",
    Icon = "shield",
    Value = false,
    Callback = function(state)
        if state then
            for _, v in pairs(getconnections(LocalPlayer.CharacterAdded)) do v:Disable() end
            for _, v in pairs(getconnections(LocalPlayer.Changed)) do v:Disable() end
        end
    end
})

-- Undetected Mode
Tabs.Settings:Toggle({
    Title = "Undetected Mode",
    Icon = "eye-off",
    Value = false,
    Callback = function(state)
        if state then
            setfflag("HumanoidParallelRemoveNoPhysics", "False")
            setfflag("HumanoidParallelRemoveNoPhysicsNoSimulate2", "False")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Undetected Mode",
                Text = "Anti detection flags set.",
                Duration = 5
            })
        end
    end
})

-- Profile System
local profileFolder = "AWPHUB/Profiles"
makefolder("AWPHUB")
if not isfolder(profileFolder) then makefolder(profileFolder) end

local currentProfile = ""

local function SaveProfile(name, data)
    writefile(profileFolder .. "/" .. name .. ".json", HttpService:JSONEncode(data))
end

local function LoadProfile(name)
    local path = profileFolder .. "/" .. name .. ".json"
    if isfile(path) then return HttpService:JSONDecode(readfile(path)) end
end

local function ListProfiles()
    local profiles = {}
    for _, file in ipairs(listfiles(profileFolder)) do
        local name = file:match("([^/]+)%.json$")
        if name then table.insert(profiles, name) end
    end
    return profiles
end

Tabs.Profiles:Input({
    Title = "Profile Name",
    Placeholder = "Enter name",
    Callback = function(text)
        currentProfile = text
    end
})

Tabs.Profiles:Button({
    Title = "Save Profile",
    Callback = function()
        if currentProfile ~= "" then
            SaveProfile(currentProfile, {
                -- Add actual toggle states here if needed
                Example = true
            })
            WindUI:Notify({ Title = "Saved", Content = "Saved profile: " .. currentProfile, Duration = 4 })
        end
    end
})

local dropdown = Tabs.Profiles:Dropdown({
    Title = "Select Profile",
    Values = ListProfiles(),
    Callback = function(value)
        currentProfile = value
    end
})

local result = factorial(5)
print("Factorial of 5 is:", result)

local TweenService = game:GetService("TweenService")
local isLooping = false
local loopConnection

-- Get closest safe zone part
local function getSafeZonePart()
    local safeZones = {
        "SafeHouse", "ObservationTower", "Shop", "CaveSafeZone"
    }

    for _, zoneName in pairs(safeZones) do
        local zone = Workspace:FindFirstChild(zoneName)
        if zone and zone:FindFirstChild("Part") then
            return zone.Part
        end
    end
    return nil
end

-- Tween to safe zone
local function tweenTo(part)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local hrp = LocalPlayer.Character.HumanoidRootPart

    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear)
    local goal = { CFrame = part.CFrame + Vector3.new(0, 5, 0) }
    local tween = TweenService:Create(hrp, tweenInfo, goal)
    tween:Play()
end

-- Start looping tween
Tabs.Settings:Toggle({
    Title = "Loop Tween to Safe Zone",
    Icon = "repeat",
    Value = false,
    Callback = function(state)
        isLooping = state
        if loopConnection then loopConnection:Disconnect() loopConnection = nil end

        if state then
            loopConnection = RunService.Heartbeat:Connect(function()
                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
                local safePart = getSafeZonePart()
                if safePart then
                    tweenTo(safePart)
                end
                wait(2) -- Delay between each teleport
            end)
            WindUI:Notify({
                Title = "Loop Enabled",
                Content = "Tweening to Safe Zone every 10 seconds",
                Duration = 4
            })
        else
            WindUI:Notify({
                Title = "Loop Disabled",
                Content = "Stopped tweening to Safe Zone.",
                Duration = 4
            })
        end
    end
})


-- Auto Avoid Rake
Tabs.Settings:Toggle({
    Title = "Auto Avoid Rake",
    Icon = "alert-octagon",
    Value = false,
    Callback = function(state)
        if loopConnection then loopConnection:Disconnect() loopConnection = nil end

        if state then
            loopConnection = RunService.Heartbeat:Connect(function()
                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

                local rake = nil
                for _, v in pairs(Workspace:GetChildren()) do
                    if v:IsA("Model") and v.Name:lower():find("rake") and v:FindFirstChild("HumanoidRootPart") then
                        rake = v
                        break
                    end
                end

                local safePart = getSafeZonePart()
                if rake and safePart then
                    local rakeHRP = rake:FindFirstChild("HumanoidRootPart")
                    local playerHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if rakeHRP and playerHRP then
                        local distance = (playerHRP.Position - rakeHRP.Position).Magnitude
                        if distance < 100 then -- Threshold to trigger escape
                            tweenTo(safePart)
                        end
                    end
                end
            end)
            WindUI:Notify({
                Title = "Auto Avoid Enabled",
                Content = "Will teleport to Safe Zone if Rake is too close.",
                Duration = 4
            })
        else
            WindUI:Notify({
                Title = "Auto Avoid Disabled",
                Content = "Stopped checking for Rake proximity.",
                Duration = 4
            })
        end
    end
})


-- Loop Tween to Safe Zone Every 2 Seconds
Tabs.Settings:Toggle({
    Title = "Tween to Safe Zone (Every 2s)",
    Icon = "refresh-cw",
    Value = false,
    Callback = function(state)
        if tweenLoop then tweenLoop:Disconnect() tweenLoop = nil end
        if state then
            tweenLoop = RunService.Heartbeat:Connect(function()
                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
                local safePart = getSafeZonePart()
                if safePart then
                    tweenTo(safePart)
                end
                wait(2)
            end)
            WindUI:Notify({
                Title = "Safe Zone Tween",
                Content = "Tweening every 2 seconds enabled.",
                Duration = 4
            })
        else
            WindUI:Notify({
                Title = "Safe Zone Tween",
                Content = "Tweening every 2 seconds disabled.",
                Duration = 4
            })
        end
    end
})

-- Anti-Tween & Anti-Teleport Detection Bypass
Tabs.Settings:Toggle({
    Title = "Bypass Tween/Teleport Detection",
    Icon = "shield-off",
    Value = false,
    Callback = function(state)
        if state then
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local oldNamecall = mt.__namecall
            mt.__namecall = newcclosure(function(self, ...)
                local method = getnamecallmethod()
                if method == "FireServer" or method == "InvokeServer" then
                    local args = {...}
                    local scriptName = tostring(self)
                    if scriptName:lower():find("tp") or scriptName:lower():find("tween") then
                        return nil
                    end
                end
                return oldNamecall(self, ...)
            end)
            setreadonly(mt, true)

            WindUI:Notify({
                Title = "Bypass Enabled",
                Content = "Teleport and Tween detection bypass active.",
                Duration = 4
            })
        else
            WindUI:Notify({
                Title = "Bypass Notice",
                Content = "Bypass cannot be undone without re-execution.",
                Duration = 4
            })
        end
    end
})



-- Auto Collect Items (Flare Gun, Scrap, Drops)
Tabs.Auto_Farm:Toggle({
    Title = "Auto Collect Items",
    Icon = "package-search",
    Value = false,
    Callback = function(state)
        if collectLoop then collectLoop:Disconnect() collectLoop = nil end
        if state then
            collectLoop = RunService.Heartbeat:Connect(function()
                for _, obj in pairs(Workspace:GetDescendants()) do
                    if obj:IsA("Tool") or (obj:IsA("Model") and obj:FindFirstChildWhichIsA("TouchTransmitter")) then
                        if obj:FindFirstChild("Handle") or obj:IsA("Tool") then
                            local handle = obj:FindFirstChild("Handle") or obj
                            if (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = handle.CFrame + Vector3.new(0, 3, 0)
                                wait(0.25)
                            end
                        end
                    end
                end
            end)
            WindUI:Notify({
                Title = "Auto Collect Enabled",
                Content = "Now collecting items automatically.",
                Duration = 4
            })
        else
            WindUI:Notify({
                Title = "Auto Collect Disabled",
                Content = "Item farming turned off.",
                Duration = 4
            })
        end
    end
})


-- Auto Anti-Lag (Background Cleanup)
spawn(function()
    while true do
        for _, v in pairs(Workspace:GetDescendants()) do
            if v:IsA("Texture") or v:IsA("Decal") then
                pcall(function() v:Destroy() end)
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Enabled = false
            elseif v:IsA("Explosion") then
                pcall(function() v:Destroy() end)
            end
        end
        wait(5) -- Run every 5 seconds
    end
end)

WindUI:Notify({
    Title = "Auto Anti-Lag",
    Content = "Background lag cleanup is running every 5 seconds.",
    Duration = 4
})
