-- Load WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")

-- Create Window
local Window = WindUI:CreateWindow({
    Title = "AWPHUB - The Rake: Remastered",
    Icon = "moon-star",
    Author = "AWP",
    Folder = "AWPHUB",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200
})

Window:EditOpenButton({
    Title = "Open AWP HUB",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromRGB(255, 0, 123), Color3.fromRGB(255, 150, 0)),
    Draggable = true
})

-- Tabs
local Tabs = {
    ESP = Window:Tab({ Title = "ESP", Icon = "eye" }),
    Settings = Window:Tab({ Title = "Settings", Icon = "sliders-horizontal" }),
    Unlockables = Window:Tab({ Title = "Unlockables", Icon = "lock-open" })
}

-- ESP Logic
local activeESP = {}

local function applyHighlight(obj, color)
    if not obj or not obj:IsDescendantOf(Workspace) then return end
    if not activeESP[obj] and obj:FindFirstChild("HumanoidRootPart") then
        local h = Instance.new("Highlight", obj)
        h.FillColor = color
        h.OutlineColor = color
        h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        activeESP[obj] = h
    end
end

local function clearESP()
    for obj, h in pairs(activeESP) do
        if h then h:Destroy() end
    end
    activeESP = {}
end

Tabs.ESP:Toggle({
    Title = "ESP: Rake",
    Icon = "skull",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("RakeESP")
        if state then
            RunService:BindToRenderStep("RakeESP", 1, function()
                for _, v in pairs(Workspace:GetChildren()) do
                    if v:IsA("Model") and v.Name:lower():find("rake") then
                        applyHighlight(v, Color3.fromRGB(255, 0, 0))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

Tabs.ESP:Toggle({
    Title = "ESP: Players",
    Icon = "user",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("PlayerESP")
        if state then
            RunService:BindToRenderStep("PlayerESP", 1, function()
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= LocalPlayer and p.Character then
                        applyHighlight(p.Character, Color3.fromRGB(0, 170, 255))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

-- Settings Toggles
local Flags = {}
local OriginalLighting = {
    Ambient = Lighting.Ambient,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    ColorShift_Top = Lighting.ColorShift_Top,
    Brightness = Lighting.Brightness,
    FogEnd = Lighting.FogEnd
}

-- Infinite Stamina
Tabs.Settings:Toggle({
    Title = "Infinite Stamina",
    Icon = "zap",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("Stamina")
        if state then
            RunService:BindToRenderStep("Stamina", 100, function()
                local energy = LocalPlayer:FindFirstChild("Energy")
                if energy then energy.Value = 100 end
                for _, v in pairs(getgc(true)) do
                    if type(v) == "table" and rawget(v, "STAMINA_REGEN") then
                        v.STAMINA_REGEN = 100
                        v.JUMP_STAMINA = 0
                        v.JUMP_COOLDOWN = 0
                        v.STAMINA_TAKE = 0
                        v.stamina = 100
                    end
                end
            end)
        end
    end
})

-- Remove Blood Hour Color
Tabs.Settings:Toggle({
    Title = "Remove Blood Hour Color",
    Icon = "sun",
    Value = false,
    Callback = function(state)
        RunService:UnbindFromRenderStep("NoBloodHour")
        if state then
            RunService:BindToRenderStep("NoBloodHour", 1, function()
                Lighting.Ambient = Color3.new(1, 1, 1)
                Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
                Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
                Lighting.ColorShift_Top = Color3.new(0, 0, 0)
                Lighting.FogColor = Color3.new(1, 1, 1)
            end)
        else
            for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
        end
    end
})

-- FullBright + No Fog
Tabs.Settings:Toggle({
    Title = "FullBright + No Fog",
    Icon = "lightbulb",
    Value = false,
    Callback = function(state)
        local function doFullBright()
            if state then
                Lighting.Ambient = Color3.new(1, 1, 1)
                Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
                Lighting.ColorShift_Top = Color3.new(1, 1, 1)
                Lighting.Brightness = 3
                Lighting.FogEnd = 100000
            else
                for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
            end
        end
        doFullBright()
        if Flags.FullBright then Flags.FullBright:Disconnect() Flags.FullBright = nil end
        if state then
            Flags.FullBright = Lighting.LightingChanged:Connect(doFullBright)
        end
    end
})

-- Fake Night Vision
Tabs.Settings:Toggle({
    Title = "Fake Night Vision",
    Icon = "eye",
    Value = false,
    Callback = function(state)
        local function doNightVision()
            if state then
                Lighting.Ambient = Color3.fromRGB(80, 255, 100)
                Lighting.ColorShift_Bottom = Color3.fromRGB(80, 255, 100)
                Lighting.ColorShift_Top = Color3.fromRGB(80, 255, 100)
                Lighting.Brightness = 2.5
                Lighting.FogEnd = 100000
            else
                for prop, val in pairs(OriginalLighting) do Lighting[prop] = val end
            end
        end
        doNightVision()
        if Flags.NightVision then Flags.NightVision:Disconnect() Flags.NightVision = nil end
        if state then
            Flags.NightVision = Lighting.LightingChanged:Connect(doNightVision)
        end
    end
})

-- Anti-AFK
Tabs.Settings:Toggle({
    Title = "Anti-AFK",
    Icon = "coffee",
    Value = true,
    Callback = function()
        Players.LocalPlayer.Idled:Connect(function()
            VirtualUser:Button2Down(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
            VirtualUser:Button2Up(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
        end)
    end
})

-- Unlockables Tab
Tabs.Unlockables:Toggle({
    Title = "No Fall Damage",
    Icon = "shield",
    Value = false,
    Callback = function(state)
        _G.NoFallDMG = state

        -- Hook metatable only once
        if not _G.NoFallHooked then
            _G.NoFallHooked = true
            local mt = getrawmetatable(game)
            local namecall = mt.__namecall
            setreadonly(mt, false)

            mt.__namecall = function(self, ...)
                if _G.NoFallDMG == true then
                    local args = { ... }
                    local method = getnamecallmethod()

                    if tostring(self) == "FD_Event" and method == "FireServer" then
                        args[1] = 0
                        args[2] = 0
                        return self.FireServer(self, unpack(args))
                    end
                end
                return namecall(self, ...)
            end

            setreadonly(mt, true)
        end
    end
})

-- Instant Supply Box Opened
Tabs.Unlockables:Toggle({
    Title = "Instant Supply Box Opened",
    Icon = "package",
    Value = false,
    Callback = function(state)
        _G.InstaOpenSupplyDrop = state

        -- RunService Heartbeat function to make supply box open instantly
        game:GetService("RunService").Heartbeat:Connect(function()
            if _G.InstaOpenSupplyDrop == true then
                pcall(function()
                    for i, v in pairs(game:GetService("Workspace").Debris.SupplyCrates.Box.GUIPart.ProximityPrompt:GetAttributes()) do
                        game:GetService("Workspace").Debris.SupplyCrates.Box.GUIPart.ProximityPrompt:SetAttribute(tostring(i), false)
                    end
                    game:GetService("Workspace").Debris.SupplyCrates.Box.UnlockValue.Value = 100
                end)
            end
        end)
    end
})
